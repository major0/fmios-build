#!/bin/sh

## usage
# Simply display the builder usage.  Though it would be nice if some of this
# information was pushed down into the sub-commands.
usage()
{
cat<<EOF
usage: ${0##*/} [options] <command> [command-opts] <package|all>

Options
-------
 -t, --target	Specify a build-target.  This is a generic concept which tells
		builder the name of the config rule to pick up from the
		.builder/ path at the top of the build-tree.  The global config
		.builder/config is always evaluated before evaluating any
		target-specific configs.  This allows for nightly and release
		targets, as well as architecture specific variations.

 -v, --version	Display the builder version.

 -d, --debug	Enable debug logging.

 -h, --help	Display the builder help and exit (may appear anywhere on the
		command line).

Commands
--------

  info		The info is used both internally by builder, as well as allows
		one to query various packages from the builder repository.

		options
		-------

		  -b, --build-deps
		  -d, --depends
		  -n, --name
		  -d, --description
		  -v, --version
		  -u, --source-uri
		  -s, --summary

  sync		Fetch , unpack, and patch any sources from the source uri.  If
		a local source has been checked out into the package directory
		then the fetch/unpack portion simply copies the local checked
		out source to the workdir for compilation.

  compile	Compile the source code.  During this stage the CC, CHOST, LD,
		and a variety of other target-specific variables will be set
		and usable within the build rules script. The predefined
		behavior for this action is to cd into the workdir, produce a
		configure script from the configure.in if necessary, run the
		configure with predefined BUILDER_CONFIG_OPTS, and then perform
		a make with BUILDER_MAKE_OPTS.

  archive	Perform a 'make install' of the package into the package's
		sysroot and then produce an archive of the package and store
		that in the build-tree's artifact directory.

  install	Install a package into the build-tree's sysroot (as opposed to
		a packages sysroot or into the build-host's root).  This is
		done automatically for any build-dependent packages.

EOF
}

## cleanup
# deal with temporary junk when we exit
cleanup()
{
	[ -f "${BUILDER_MAKEFILE}" ] && rm -f "${BUILDER_MAKEFILE}"
}

## error <message>
# displays the supplied <message> on stderr
error()
{
	echo "error: $*" >&2
}

## die <message>
# display the supplied <message> and exit with an error
die()
{
	error "$*"
	exit 1
}

## import <package>
# import a package into the current program space
import()
{
	[ -d "${BUILDER_PKGDIR}/${1}" ] || die "no such package '${1}'"
	[ -f "${BUILDER_PKGDIR}/${1}/Buildrules" ] || die "no rule to build package '${1}'"

	# Set the name so it can be used in the Buildrules
	NAME="${1}"

	# Clear all the pkg variables that we depend on
	VERSION=
	DESCRIPTION=
	SOURCE_URI=
	PATCHES=
	BDEPENDS=
	RDEPENDS=

	. "${BUILDER_PKGDIR}/${NAME}/Buildrules"

	[ "${NAME}" = "${1}" ] || die "Buildrules can not set the package name"
	[ -z "${VERSION}" ] && die "missing version in '${NAME}'"
	[ -z "${DESCRIPTION}" ] && die "missing description in '${NAME}'"

	if [ ! -d "${BUILDER_PKGDIR}/${NAME}/source" ]; then
		if [ -z "${SOURCE_URI}" ]; then
			die "SOURCE_URI undefined and no source directory in '${NAME}'"
		fi
	fi

	D="${BUILDER_PKGDIR}/${NAME}/install"
	W="${BUILDER_PKGDIR}/${NAME}/build"
	S="${BUILDER_PKGDIR}/${NAME}/build/${NAME}-${VERSION}"
	F="${BUILDER_PKGDIR}/${NAME}/files"
	L="${BUILDER_PKGDIR}/${NAME}/log"
}

set -e

##
# Argument parsing
if [ "$#" -eq "0" ]; then
	set -- "all"
fi

##
# Check to see if we are wrapping a sub-command
BUILD_COMMAND=
if [ -f "${1}" ]; then
	case "${1}" in
	(*build-*)
		BUILD_COMMAND="${1}"
		shift
		. "${BUILD_COMMAND}"
		# exit with the exit status of the last command from within the
		# sub-script.  This is normal shell behavior, we are just
		# making it explicit.
		exit $?
		;;
	esac
fi

for arg in "$@"; do
	case "${arg}" in
	(-h|-help|--help)	usage; exit 0;;
	esac
done
unset arg

TARGET="default"
DEBUG="0"
while [ "$#" -gt "0" ]; do
	case "$1" in
	(-v|-version|--version)	version; exit 0;;
	(-t|-target|--target)
		shift 1
		if [ "$#" -eq "0" ]; then
			echo "error: no target specified" >&2
			exit 1
		fi
		TARGET="${1}"
		shift 1
		;;
	(-d|-debug|--debug)
		shift 1
		DEBUG=1
		;;
	(-*)	echo "error: unknown option '${1}'" >&2
		echo "try '${0} --help'" >&2
		exit 1
		;;
	(*)	break
		;;
	esac
	shift 1
	echo "$@"
done

##
# Done with arguments, time for setting up the enviroment for the build
BUILDER_TOPDIR="${PWD}"
while [ ! -z "${BUILDER_TOPDIR}" ]; do
	[ -d "${BUILDER_TOPDIR}/.builder" ] && break
	BUILDER_TOPDIR="${BUILDER_TOPDIR%/*}"
done
if [ -z "${BUILDER_TOPDIR}" ]; then
	echo "error: current path not in a build-tree" >&2
	exit 1
fi

##
# This may be a little bit confusing to most.  The core issue here is the
# ability to deal with compiled-in defaults, user-defined defaults, environment
# settings, and target settings.
BUILDER_CFGDIR="${BUILDER_TOPDIR}/.builder"

# first clear the variables that would be set by the configs
CFGDIR=
PKGDIR=
SRCDIR=
ATFDIR=
LIBDIR=
# grab the default and target settings if available, let the target settings
# override the user-defined defaults.
if [ "${TARGET}" = "default" ]; then
	. "${BUILDER_CFGDIR}/default"
fi

if [ "${TARGET}" != "default" ]; then
	if [ ! -f "${BUILDER_CFGDIR}/${TARGET}" ]; then
		echo "error: invalid target '${TARGET}'" >&2
		exit 1
	fi
	BUILDER_CONFIG="${BUILDER_CFGDIR}/${TARGET}"
fi
. "${BUILDER_CONFIG}"

# set the builtin defaults based on the BUILDER_TOPDIR
BUILDER_PKGDIR="${BUILDER_PKGDIR:-${BUILDER_TOPDIR}/packages}"
BUILDER_SRCDIR="${BUILDER_SRCDIR:-${BUILDER_TOPDIR}/sources}"
BUILDER_ATFDIR="${BUILDER_ATFDIR:-${BUILDER_TOPDIR}/artifacts}"
BUILDER_LIBDIR="${BUILDER_LIBDIR:-${BUILDER_TOPDIR}/scripts/builder}"
BUILDER_SYSROOT="${BUILDER_SYSROOT:-${BUILDER_TOPDIR}/root}"

# set the builder variables based on what was available, either defaults or
# user-defined, this also allows the BUILDER_* defaults to be overridden by the
# environ, possibly from within ${HOME}/.profile
BUILDER_CFGDIR="${CFGDIR:-${BUILDER_CFGDIR}}"
BUILDER_PKGDIR="${PKGDIR:-${BUILDER_PKGDIR}}"
BUILDER_SRCDIR="${SRCDIR:-${BUILDER_SRCDIR}}"
BUILDER_ATFDIR="${ATFDIR:-${BUILDER_ATFDIR}}"
BUILDER_LIBDIR="${LIBDIR:-${BUILDER_LIBDIR}}"
BUILDER_SYSROOT="${SYSROOT:-${BUILDER_SYSROOT}}"
export BUILDER_CFGDIR BUILDER_PKGDIR BUILDER_SRCDIR BUILDER_ATFDIR
export BUILDER_LIBDIR BUILDER_TOPDIR BUILDER_SYSROOT

ARCHIVE_FORMAT="${ARCHIVE_FORMAT:-tar.bz2}"
export ARCHIVE_FORMAT

PATH="${BUILDER_LIBDIR}:${PATH}"
export PATH

# Do some basic checking regarding the target package
if [ "$#" -eq "0" ]; then
	error "no package specified"
	echo "try '${0} --help'" >&2
	exit 1
fi

# if we aren't given an action then we do everything
ACTION="archive"
if [ "$#" -gt "0" ]; then
	ACTION="${1}"
	shift 1
fi

if [ "${ACTION}" = "all" ]; then
	ACTION="install"
fi

if [ ! -x "${BUILDER_LIBDIR}/build-${ACTION}" ]; then
	error "unknown action '${ACTION}'"
	echo "try '${0} --help'" >&2
	exit 1
fi

if [ "$#" -lt "1" ]; then
	NAME="all"
	if [ "${PWD##${BUILDER_PKGDIR}/}" != "${PWD}" ]; then
		NAME="${PWD##${BUILDER_PKGDIR}/}"
		NAME="${NAME%/*}"
	fi
	set -- "${NAME}"
fi

if [ "${1}" != "all" ]; then
	# sort/uniq the argument list
	set -- $(for package in "$@"; do echo "${package}" ; done | sort | uniq)
	for package in "$@"; do
		# If all is specified anywhere in the argument list than just discard
		# everything else.
		if [ "${package}" = "all" ]; then
			exec "${0}" "${ACTION}" "${package}"
		fi
		[ -d "${BUILDER_PKGDIR}/${package}" ] || die "no such package '${package}'"
		[ -f "${BUILDER_PKGDIR}/${package}/Buildrules" ] || die "no rule to build package '${package}'"
	done
fi

# info is a special case
# FIXME this is semi-busted
if [ "${ACTION}" = "info" ]; then
	for package in "$@"; do
		"${BUILDER_LIBDIR}/build-info" "${package}" "${@}"
	done
	exit
fi

# build the Makefile
trap cleanup EXIT
BUILDER_MAKEFILE="$(mktemp /tmp/builder_makefile.XXXXXXXX)"
if [ ! -f "${BUILDER_MAKEFILE}" ]; then
	die "failed to generate build dependencies"
fi
export BUILDER_MAKEFILE
"${BUILDER_LIBDIR}/build-makedeps" || die "failed generate build dependencies"

# FIXME not the right way to handle this, we should be only setting this if the
# target leaves it empty, and we should stick with the norm of setting it to
# num_cpus+1
MAKE_OPTS="-j8"
export MAKE_OPTS

packages=
for package in "$@"; do
	packages="${packages} ${package}_${ACTION}"
done
set -- ${packages}
unset packages

# exec out to make with the appropriate Makefile
exec make ${MAKE_OPTS} -r -f "${BUILDER_MAKEFILE}" "${@}"
