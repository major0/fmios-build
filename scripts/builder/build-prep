#!/usr/bin/env build

echo "prepping: ${1}"

eval $(build-query --environ "${1}")

## Prep the build environment
if [ -d "${S}" ]; then
	mv "${S}" "${S}.old"
	rm -rf "${S}.old" &
fi

[ -d "${S}" ] || mkdir -p "${S}"
[ -d "${L}" ] || mkdir -p "${L}"
[ -d "${E}" ] || mkdir -p "${E}"
[ -d "${T}" ] || mkdir -p "${T}"
[ -d "${D}" ] || mkdir -p "${D}"

## Prep the logging
cat /dev/null > "${L}/prep.log"
set > "${E}/prep.env"

if [ -d "${BUILDER_PKGDIR}/${CATEGORY}/${NAME}/source" ]; then
	if [ "$(command -v rsync)" ]; then
		if ! rsync -rav --delete "${BUILDER_PKGDIR}/${CATEGORY}/${NAME}/source/" "${S}"; then
			die "failed to sync source to '${S}'"
		fi
	else
		if ! cp -vadpR "${BUILDER_PKGDIR}/${CATEGORY}/${NAME}/source" "${S}"; then
			die "failed to copy source to '${S}'"
		fi
	fi >> "${L}/prep.log" 2>&1
else
	# FIXME this stuff needs a lot of work
	for url in ${SOURCE_URI}; do
		file="$(build-fetch --name "${url}")"
		if [ ! -f "${BUILDER_SRCDIR}/${file}" ]; then
			die "source does not exist '${file}'"
		fi

		tar xavf "${BUILDER_SRCDIR}/${file}" -C "${W}" >> "${L}/prep.log" 2>&1
	done
fi

# FIXME wrap up the patch command with something more functional
if [ ! -z "${PATCHES}" ]; then
	for patch in ${PATCHES}; do
		echo "${NAME}: applying patch '${patch}'" | tee -a "${L}/prep.log"
		if ! patch -l -t -d "${S}" -p1 < "${F}/${NAME}-${VERSION}-${patch}.patch"; then
			exit 1
		fi >> "${L}/prep.log" 2>&1
	done
fi


##
# Technically everything should be done, but our removal of ${S}.old might still be
# running, so wait for everything before we exit.
wait


# vim: filetype=sh
