#!/usr/bin/env build

echo "archiving: ${1}"
eval $(build query --environ "${1}")

ARCHIVE_TMP1=
ARCHIVE_TMP2=
cleanup()
{
	[ -f "${ARCHIVE_TMP1}" ] && rm -f "${ARCHIVE_TMP1}"
	[ -f "${ARCHIVE_TMP2}" ] && rm -f "${ARCHIVE_TMP2}"
	exit 0
}
trap cleanup EXIT
set -e

ARCHIVE_TMP1="$(mktemp /tmp/${NAME}-${VERSION}.XXXXXXXX)"
ARCHIVE_TMP2="$(mktemp /tmp/${NAME}-${VERSION}.XXXXXXXX)"

[ -f "${ARCHIVE_TMP1}" ] || die "failed to create temporary archive for package '${NAME}'"
[ -f "${ARCHIVE_TMP2}" ] || die "failed to create temporary archive for package '${NAME}'"

case "${ARCHIVE_FORMAT}" in
(tbz2|tar.bz2)	ARCHIVE_COMPRESSOR="bzip2 -cv";;
(tgz|tar.gz)	ARCHIVE_COMPRESSOR="gzip -cv";;
(*)		die "unsupported archive format '${ARCHIVE_FORMAT}'";;
esac

if [ ! -d "${BUILDER_ATFDIR}/${CATEGORY}" ]; then
	mkdir -p "${BUILDER_ATFDIR}/${CATEGORY}"
fi

cd "${D}"
tar -cvf "${ARCHIVE_TMP1}" .  > "${L}/archive.log" 2>&1
${ARCHIVE_COMPRESSOR} "${ARCHIVE_TMP1}" > "${ARCHIVE_TMP2}" 2>> "${L}/archive.log"
if [ -f "${BUILDER_ATFDIR}/${CATEGORY}/${NAME}-${VERSION}.${ARCHIVE_FORMAT}" ]; then
	rm -f "${BUILDER_ATFDIR}/${CATEGORY}/${NAME}-${VERSION}.${ARCHIVE_FORMAT}"
fi
mv -v "${ARCHIVE_TMP2}" "${BUILDER_ATFDIR}/${CATEGORY}/${NAME}-${VERSION}.${ARCHIVE_FORMAT}" >> "${L}/archive.log" 2>&1
touch -r "${W}/.compiled" "${BUILDER_ATFDIR}/${CATEGORY}/${NAME}-${VERSION}.${ARCHIVE_FORMAT}"

# vim: filetype=sh
