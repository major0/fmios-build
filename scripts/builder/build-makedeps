#!/usr/bin/env build
cat >"${BUILDER_MAKEFILE}" <<EOF
##
# Some generic catchall rules
all: ${PROJECT}_archive
all_fetch: ${PROJECT}_all_fetch
all_archive: ${PROJECT}_all_archive
all_install: ${PROJECT}_all_install
all_makedeps:
all_source:

sysroot_clean:
	@if [ -d "${SYSROOT}" ]; then \
		echo "cleaning: sysroot" ; \
		(cd "${SYSROOT}" && find . -delete) ; \
	fi
artifacts_clean:
	@if [ -d "${BUILDER_ATFDIR}" ]; then \
		echo "cleaning: artifacts" ; \
		(cd "${BUILDER_ATFDIR}" && find . -delete) ; \
	fi
EOF

PACKAGES=
PACKAGES_SOURCES=
PACKAGES_COMPILE=
PACKAGES_ARCHIVE=
PACKAGES_INSTALL=
PACKAGES_CLEAN=
PACKAGES_DISTCLEAN=
for package in $(cd "${BUILDER_PKGDIR}" && echo */*); do
	if [ ! -f "${BUILDER_PKGDIR}/${package}/Buildrules" ]; then
		error "no rulesfile for package '${package}'"
		continue
	fi
	if ! eval $(build-query --environ "${package}"); then
		die "in package '${package}'"
	fi

	package_make="$(echo "${package}"|tr '/-' '__')"
	package_archive="${BUILDER_ATFDIR}/${CATEGORY}/${NAME}-${VERSION}.${ARCHIVE_FORMAT}"
	package_install="${SYSROOT}/var/db/binpkgs/${CATEGORY}/${NAME}"
	package_logdir="${L}"

	package_sources="${RULESFILE}"
	for patch in ${PATCHES}; do
		patch="${F}/${NAME}-${VERSION}-${patch}.patch"
		if [ ! -f "${patch}" ]; then
			die "patch does not exist '${patch}'"
		fi
		package_sources="${package_sources} ${patch}"
	done

	# FIXME there can be strange characters in a URI .. this might not be
	# the best approach in the long term.
	for url in ${SOURCE_URI}; do
		case "${url}" in
		# Do not translate local paths into archives in BUILDER_SRCDIR
		(file://*|/*)	package_sources="${package_sources} ${url##file://}";;

		# Assume anything else with :// in the name is remote
		(*://*)		pkg_src="$(build-fetch --name "${url}")"
				if [ $? -ne 0 ]; then
					exit 1
				fi
				package_sources="${package_sources} ${BUILDER_SRCDIR}/${pkg_src}";;
		# Junk?
		(*)		die "do not know how to handle url '${url}'";;
		esac
	done

	# This loop can end up being fairly costly if we have to fire up
	# build-query, particularly when dealing with a large number of
	# packages.  So we do some FS level checks first in hopes of avoiding
	# it and improving performance.
	package_deps=
	for pkg_dep in ${BDEPENDS}; do
		if [ ! -d "${BUILDER_PKGDIR}/${pkg_dep}" ]; then
			if [ ! -d "${BUILDER_PKGDIR}/${PROJECT}/${pkg_dep}" ]; then
				if ! build-query --exists "${pkg_dep}"; then
					die "bad BDEPENDS in package '${package}'"
				fi
			elif [ ! -f "${BUILDER_PKGDIR}/${PROJECT}/${pkg_dep}/Buildrules" ]; then
				die "no Buildrules for '${pkg_dep}'"
			fi
			pkg_dep="${PROJECT}/${pkg_dep}"
		elif [ ! -f "${BUILDER_PKGDIR}/${pkg_dep}/Buildrules" ]; then
			die "no Buildrules for '${pkg_dep}'"
		fi
		package_deps="${package_deps} ${SYSROOT}/var/db/binpkgs/${pkg_dep}"
	done

cat <<EOF

##
# ${CATEGORY}/${NAME} - ${DESCRIPTION}
${package_make}: ${package_archive}
${package_make}_makedeps:
${package_make}_fetch: ${package_sources}
${package_make}_source: ${package_sources}
	@build-source "${CATEGORY}/${NAME}"
${package_make}_clean:
	@build-clean "${CATEGORY}/${NAME}"
${package_make}_distclean:
	@build-distclean "${CATEGORY}/${NAME}"
${package_archive}: ${package_sources} ${package_deps}
	@build-package "${CATEGORY}/${NAME}"
${package_make}_install: ${package_install}
${package_install}: ${package_archive}
	@build-install "${CATEGORY}/${NAME}"
EOF

	##
	# This is a bit of a fun late-injection of the source archive for a
	# package.  The core problem is that multiple packages may depend on
	# the same sources, so we set up a separate rule for the source
	# archive when processing the package, but only if an existing entry
	# for that source does not exist.  We use the source name (as opposed
	# to the package name) to track if the package already has a rule.  The
	# whole thing really translates into something like
	# foo_1_1_3_tar_bz2="http://some/path/to/foo-1.1.3.tar.bz2"
	# All forms of URL translation and variable translation are done for us
	# by fetch so that makedeps doesn't have any specific expectations on
	# what the variable name should be.

	for url in ${SOURCE_URI}; do
		case "${url}" in
		# Do not translate local paths into archives in BUILDER_SRCDIR
		(file://*|/*)	echo "${url##file://}:";;

		# Assume anything else with :// in the name is remote
		(*://*)
			var="$(build-fetch --var "${url}")"
			if [ -z "$(eval echo -n "\$${var}")" ]; then
				eval "${var}='${url}'"
				echo "${BUILDER_SRCDIR}/$(build-fetch --name "${url}"):"
				echo "	@build-fetch \"${url}\""
			fi
			;;
		esac
	done

	CATEGORIES="${CATEGORIES} ${CATEGORY}"

	eval "${CATEGORY}_SOURCES=\"\${${CATEGORY}_SOURCES} ${package_sources}\""
	eval "${CATEGORY}_PACKAGES=\"\${${CATEGORY}_PACKAGES} ${package_archive}\""
	eval "${CATEGORY}_INSTALL=\"\${${CATEGORY}_INSTALL} ${package_install}\""
	eval "${CATEGORY}_CLEAN=\"\${${CATEGORY}_CLEAN} ${package_make}_clean\""
	eval "${CATEGORY}_DISTCLEAN=\"\${${CATEGORY}_DISTCLEAN} ${package_make}_distclean\""

	PACKAGES_CLEAN="${PACKAGES_CLEAN} ${package_make}_clean"
done >> "${BUILDER_MAKEFILE}"

# FIXME It would have been nice to have not inserted the category if it was
# already in the list.
CATEGORIES="$(for CATEGORY in ${CATEGORIES};do echo "${CATEGORY}";done|sort|uniq)"

for CATEGORY in ${CATEGORIES}; do
cat<<EOF >> "${BUILDER_MAKEFILE}"
${CATEGORY}_all: ${CATEGORY}_archive
${CATEGORY}_all_fetch: $(eval echo "\${${CATEGORY}_SOURCES}")
${CATEGORY}_all_archive: $(eval echo "\${${CATEGORY}_PACKAGES}")
${CATEGORY}_all_install: $(eval echo "\${${CATEGORY}_INSTALL}")
${CATEGORY}_all_clean: $(eval echo "\${${CATEGORY}_CLEAN}")
${CATEGORY}_all_distclean: $(eval echo "\${${CATEGORY}_DISTCLEAN}")

EOF
done

cat<<EOF >> "${BUILDER_MAKEFILE}"
all_clean: ${PACKAGES_CLEAN}
all_distclean: sysroot_clean artifacts_clean
EOF

# vim: filetype=sh
